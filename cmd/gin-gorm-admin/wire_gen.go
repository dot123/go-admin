// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dot123/gin-gorm-admin/api/v1"
	"github.com/dot123/gin-gorm-admin/internal/models/file"
	"github.com/dot123/gin-gorm-admin/internal/models/msg"
	"github.com/dot123/gin-gorm-admin/internal/models/system"
	"github.com/dot123/gin-gorm-admin/internal/models/util"
	"github.com/dot123/gin-gorm-admin/internal/service"
	"github.com/dot123/gin-gorm-admin/pkg/fileStore"
)

import (
	_ "github.com/dot123/gin-gorm-admin/docs"
)

// Injectors from wire.go:

func BuildInjector(local *fileStore.Local) (*Injector, func(), error) {
	db, cleanup, err := InitGormDB()
	if err != nil {
		return nil, nil, err
	}
	syncedEnforcer, cleanup2, err := InitCasbin(db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sysUserRepo := &system.SysUserRepo{
		DB: db,
	}
	sysRoleRepo := &system.SysRoleRepo{
		DB: db,
	}
	authSrv := service.NewAuthSrv(sysUserRepo, sysRoleRepo)
	authApi := &v1.AuthApi{
		AuthSrv: authSrv,
	}
	monitorSrv := &service.MonitorSrv{}
	monitorApi := &v1.MonitorApi{
		MonitorSrv: monitorSrv,
	}
	fileRepo := &file.FileRepo{
		DB: db,
	}
	fileSrv := &service.FileSrv{
		FileRepo: fileRepo,
		Local:    local,
	}
	fileApi := &v1.FileApi{
		FileSrv: fileSrv,
	}
	msgRepo := &msg.MsgRepo{
		DB: db,
	}
	msgSrv := service.NewMsgSrv(msgRepo)
	msgApi := &v1.MsgApi{
		MsgSrv: msgSrv,
	}
	sysApiRepo := &system.SysApiRepo{
		DB: db,
	}
	sysApiSrv := &service.SysApiSrv{
		SysApiRepo: sysApiRepo,
	}
	sysApi := &v1.SysApi{
		SysApiSrv: sysApiSrv,
	}
	sysPostRepo := &system.SysPostRepo{
		DB: db,
	}
	sysUserSrv := &service.SysUserSrv{
		SysUserRepo: sysUserRepo,
		SysRoleRepo: sysRoleRepo,
		SysPostRepo: sysPostRepo,
	}
	sysMenuRepo := &system.SysMenuRepo{
		DB: db,
	}
	sysDeptRepo := &system.SysDeptRepo{
		DB: db,
	}
	trans := &util.Trans{
		DB: db,
	}
	sysRoleSrv := &service.SysRoleSrv{
		SysRoleRepo: sysRoleRepo,
		SysMenuRepo: sysMenuRepo,
		SysDeptRepo: sysDeptRepo,
		TransRepo:   trans,
		Enforcer:    syncedEnforcer,
	}
	sysUserApi := &v1.SysUserApi{
		SysUserSrv: sysUserSrv,
		SysRoleSrv: sysRoleSrv,
	}
	sysRoleApi := &v1.SysRoleApi{
		SysRoleSrv: sysRoleSrv,
	}
	sysPostSrv := &service.SysPostSrv{
		SysPostRepo: sysPostRepo,
	}
	sysPostApi := &v1.SysPostApi{
		SysPostSrv: sysPostSrv,
	}
	sysDeptSrv := &service.SysDeptSrv{
		SysDeptRepo: sysDeptRepo,
		SysRoleRepo: sysRoleRepo,
		SysUserRepo: sysUserRepo,
		TransRepo:   trans,
	}
	sysDeptApi := &v1.SysDeptApi{
		SysDeptSrv: sysDeptSrv,
	}
	sysMenuSrv := &service.SysMenuSrv{
		SysMenuRepo: sysMenuRepo,
		SysApiRepo:  sysApiRepo,
		TransRepo:   trans,
		SysRoleRepo: sysRoleRepo,
	}
	sysMenuApi := &v1.SysMenuApi{
		SysMenuSrv: sysMenuSrv,
		SysRoleSrv: sysRoleSrv,
	}
	router := &Router{
		Enforcer:   syncedEnforcer,
		AuthSrv:    authSrv,
		AuthApi:    authApi,
		MonitorApi: monitorApi,
		FileApi:    fileApi,
		MsgApi:     msgApi,
		SysApi:     sysApi,
		SysUserApi: sysUserApi,
		SysRoleApi: sysRoleApi,
		SysPostApi: sysPostApi,
		SysDeptApi: sysDeptApi,
		SysMenuApi: sysMenuApi,
	}
	engine := InitGinEngine(router)
	injector := &Injector{
		Engine:    engine,
		SysApiSrv: sysApiSrv,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
